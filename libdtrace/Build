# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2011 -- 2013 Oracle, Inc.  All rights reserved.
# Use is subject to license terms.

BUILDLIBS += libdtrace-build
libdtrace-build_CPPFLAGS = -Ilibdtrace -Ilibproc -Iuts/intel -Ilibdtrace/i386 -D_LONGLONG_TYPE \
                           -DDTRACE_LIBDIR="\"$(LIBDIR)/dtrace\""
libdtrace-build_TARGET = libdtrace
libdtrace-build_DIR := $(current-dir)
libdtrace-build_SOURCES = dt_lex.c dt_aggregate.c dt_as.c dt_buf.c dt_cc.c \
                          dt_cg.c i386/dis_tables.c i386/dt_isadep.c \
                          dt_consume.c dt_debug.c dt_decl.c dt_dis.c \
                          dt_dof.c dt_error.c dt_errtags.c dt_grammar.c \
                          dt_handle.c dt_ident.c dt_inttab.c \
                          dt_kernel_module.c dt_link.c dt_list.c dt_map.c \
                          dt_module.c dt_names.c dt_open.c dt_options.c \
                          dt_parser.c dt_pcb.c dt_pid.c dt_pragma.c \
                          dt_printf.c dt_proc.c dt_program.c dt_provider.c \
                          dt_regset.c dt_string.c dt_strtab.c dt_subr.c \
                          dt_symtab.c dt_work.c dt_xlator.c
libdtrace-build_SRCDEPS := dt_grammar.h

SHLIBS += libdtrace

libdtrace_DIR := $(current-dir)
libdtrace_TARGET = libdtrace
libdtrace_LIBS := -ldtrace-ctf -lport -lelf -lz -lrt -lpthread -ldl
libdtrace_VERSION := 0.0.0
libdtrace_SONAME := libdtrace.so.0
libdtrace_VERSCRIPT := $(libdtrace_DIR)libdtrace.ver
libdtrace_LIBSOURCES := libdtrace-build libproc libport
libdtrace_SECONDARY := libproc libport

$(libdtrace_DIR)dt_errtags.c: $(libdtrace-build_DIR)dt_errtags.h $(libdtrace-build_DIR)/mkerrtags.sh
	sh $(libdtrace-build_DIR)mkerrtags.sh < $(libdtrace-build_DIR)dt_errtags.h | sed -e 's/\\n/\n/g' > $(libdtrace-build_DIR)dt_errtags.c

$(libdtrace-build_DIR)dt_names.c: /usr/include/linux/dtrace/dif_defines.h $(libdtrace-build_DIR)/mknames.sh
	$(call describe-target,MKNAMES,$(libdtrace-build_DIR)dt_names.c)
	sh $(libdtrace-build_DIR)mknames.sh < /usr/include/linux/dtrace/dif_defines.h | sed -e 's/\\n/\n/g' > $(libdtrace-build_DIR)dt_names.c

$(libdtrace-build_DIR)%.h $(libdtrace-build_DIR)%.c: $(libdtrace-build_DIR)%.y
	$(call describe-target,YACC,$(libdtrace-build_DIR)$*.c)
	bison -o $(libdtrace-build_DIR)$*.c -d $(libdtrace-build_DIR)$*.y

$(libdtrace-build_DIR)dt_lex.c: $(libdtrace-build_DIR)dt_grammar.h $(libdtrace-build_DIR)dt_lex.l
	$(call describe-target,LEX,$(libdtrace-build_DIR)dt_lex.c)
	flex -o$(libdtrace-build_DIR)dt_lex.c $(libdtrace-build_DIR)dt_lex.l

SED_DLIBS += \
	procfs.d \
	io.d \
	ip.d \
	net.d \
	sysevent.d \
	tcp.d \
	udp.d

BUILD_DLIBS += \
	$(SED_DLIBS) \
	errno.d \
	signal.d

WORKING_DLIBS = errno.d \
                io.d \
                procfs.d \
                regs.d \
                sched.d \
                signal.d \
                unistd.d

# Normal substitutions.

$(objdir)/%.sed: $(libdtrace-build_DIR)%.sed.in
	$(call describe-target,SED,$<)
	$(PREPROCESS) -x c -I$(KERNELDIR)/include -I$(KERNELDIR)/arch/$(KERNELARCH)/include \
		      -D_KERNEL -D__KERNEL__ $< 2>/dev/null | \
	    m4 $(libdtrace-build_DIR)sed-replace.m4 - > $@
	if grep -q @@@@SUBST-FAIL@@@@ $@; then \
		echo "Error: Not all tokens in $^ defined in headers." >&2; \
		exit 1; \
	fi

$(foreach dlib,$(filter $(WORKING_DLIBS),$(SED_DLIBS)),$(call src-name,libdtrace,$(dlib))): \
		%.d: $$(addprefix $$(objdir)/,$$(notdir %.sed)) %.d.in
	$(call describe-target,SED,$*.d.in)
	sed -f $(addprefix $(objdir)/,$(notdir $*.sed)) < $*.d.in > $@

PHONIES += dlibs working-dlibs
TARGETS += dlibs working-dlibs
dlibs: $(call src-name,libdtrace,$(WORKING_DLIBS))

working-dlibs: $(addprefix $(objdir)/dlibs/,$(WORKING_DLIBS))

$(objdir)/dlibs/.dir.stamp:
	mkdir -p $(objdir)/dlibs
	@touch $(objdir)/dlibs/.dir.stamp
	ln -sf ../../$(libdtrace-build_DIR)/drti-vers $(objdir)/dlibs

$(addprefix $(objdir)/dlibs/,$(WORKING_DLIBS)):: $(objdir)/dlibs/.dir.stamp

$(addprefix $(objdir)/dlibs/,$(WORKING_DLIBS)):: $(objdir)/dlibs/%: $(libdtrace-build_DIR)%
	$(call describe-target,CP,$^)
	cp -f $^ $@

PHONIES += objs
TARGETS += objs
BUILD_DRTI_OBJ = $(objdir)/drti.o
DRTI_OBJ = $(objdir)/dlibs/drti.o
BUILD_DRTI32_OBJ = $(objdir)/drti32.o
DRTI32_OBJ = $(objdir)/dlibs/drti32.o

objs: $(DRTI_OBJ) $(DRTI32_OBJ)
$(BUILD_DRTI_OBJ): $(libdtrace-build_DIR)drti.c
	$(call describe-target,CC,$<)
	$(CC) $(filter-out --coverage,$(CFLAGS)) -fPIC $(CPPFLAGS) $(libdtrace-build_CPPFLAGS) -MP -MMD -c -o $@ $<
$(DRTI_OBJ): $(BUILD_DRTI_OBJ) $(objdir)/dlibs/.dir.stamp
	ln -sf $(BUILD_DRTI_OBJ) $(DRTI_OBJ)
$(BUILD_DRTI32_OBJ): $(libdtrace-build_DIR)drti.c
	$(call describe-target,CC-32,$<)
	$(CC) $(filter-out --coverage,$(CFLAGS)) -m32 -fPIC $(CPPFLAGS) $(libdtrace-build_CPPFLAGS) -MP -MMD -c -o $@ $<
$(DRTI32_OBJ): $(BUILD_DRTI32_OBJ) $(objdir)/dlibs/.dir.stamp
	ln -sf $(BUILD_DRTI32_OBJ) $(DRTI32_OBJ)

# Custom substitutions.

$(libdtrace-build_DIR)errno.d: /usr/include/linux/errno.h
	$(call describe-target,AWK,$(libdtrace-build_DIR)errno.d)
	echo '#include <errno.h>' | $(CC) -x c -E -dD - \
	| grep '^#define E' | $(libdtrace-build_DIR)mkerrno.sh > $@

$(libdtrace-build_DIR)signal.d: /usr/include/bits/signum.h
	$(call describe-target,SED,$(libdtrace-build_DIR)signal.d)
	$(libdtrace-build_DIR)mksignal.sh < /usr/include/bits/signum.h \
	| sed -e 's/\\n/\n/g' \
	| sed -e '/inline int SIGCLD/{h;d}' -e '/"1.0" SIGCHLD/{G;}' \
	| sed -e '/"1.0" SIGCLD/{h;d}' -e '/ = SIGCHLD;/{G;}' \
	| sed -e '/inline int SIGPOLL/{h;d}' -e '/"1.0" SIGIO/{G;}' \
	| sed -e '/"1.0" SIGPOLL/{h;d}' -e '/ = SIGIO/{G;}' \
	| sed -e '/SIGRTMIN/d' -e '/SIGRTMAX/d' > $@

$(libdtrace-build_DIR)regs.d: $(libdtrace-build_DIR)i386/regs.d
	cp $< $@

clean::
	$(call describe-target,CLEAN,libdtrace)
	rm -f $(libdtrace-build_DIR)dt_errtags.c $(libdtrace-build_DIR)dt_names.c
	rm -f $(libdtrace-build_DIR)dt_grammar.h $(libdtrace-build_DIR)dt_grammar.c
	rm -f $(libdtrace-build_DIR)dt_lex.c
	rm -f $(libdtrace-build_DIR)regs.d
	rm -f $(addprefix $(libdtrace-build_DIR),$(BUILD_DLIBS))

install::
	mkdir -p $(LIBDIR)/dtrace $(INCLUDEDIR)
	$(call describe-install-target,$(INCLUDEDIR),dtrace.h)
	install -m 644 $(libdtrace-build_DIR)dtrace.h $(INCLUDEDIR)
	$(call describe-install-target,$(LIBDIR),$(libdtrace_TARGET).so.$(libdtrace_VERSION))
	install -m 755 $(objdir)/$(libdtrace_TARGET).so.$(libdtrace_VERSION) $(LIBDIR)
	$(call describe-install-target,$(LIBDIR),$(libdtrace_SONAME))
	ln -sf libdtrace.so.$(libdtrace_VERSION) $(LIBDIR)/$(libdtrace_SONAME)
	$(call describe-install-target,$(LIBDIR),$(libdtrace_TARGET).so)
	ln -sf libdtrace.so.$(libdtrace_VERSION) $(LIBDIR)/$(libdtrace_TARGET).so
	$(call describe-install-target,$(LIBDIR)/dtrace,$(DRTI_OBJ))
	install -m 644 $(DRTI_OBJ) $(LIBDIR)/dtrace
	$(call describe-install-target,$(LIBDIR)/dtrace,$(DRTI32_OBJ))
	install -m 644 $(DRTI32_OBJ) $(LIBDIR)/dtrace
	$(call describe-install-target,$(LIBDIR)/dtrace,$(WORKING_DLIBS) drti-vers)
	cd $(objdir)/dlibs && install -m 644 $(WORKING_DLIBS) \
		drti-vers $(LIBDIR)/dtrace
