# Oracle Linux DTrace.
# Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

BUILDLIBS += libdtrace-build
libdtrace-build_CPPFLAGS = -Ilibdtrace -Ilibproc -Iuts/intel -Ilibdtrace/$(ARCHINC) -D_LONGLONG_TYPE \
                           -DDTRACE_LIBDIR="\"$(LIBDIR)/dtrace\"" -DDTRACE_USER_UID=$(USER_UID)
libdtrace-build_TARGET = libdtrace
libdtrace-build_DIR := $(current-dir)
libdtrace-build_SOURCES = dt_lex.c dt_aggregate.c dt_as.c dt_buf.c dt_cc.c \
                          dt_cg.c dt_consume.c dt_debug.c dt_decl.c dt_dis.c \
                          dt_dof.c dt_error.c dt_errtags.c dt_grammar.c \
                          dt_handle.c dt_ident.c dt_inttab.c dt_link.c \
                          dt_kernel_module.c dt_list.c dt_map.c dt_module.c \
                          dt_names.c dt_open.c dt_options.c dt_parser.c \
                          dt_pcb.c dt_pid.c dt_pragma.c dt_printf.c dt_proc.c \
                          dt_program.c dt_provider.c dt_regset.c dt_string.c \
                          dt_strtab.c dt_subr.c dt_symtab.c dt_work.c \
                          dt_xlator.c $(ARCHINC)/dt_isadep.c

libdtrace-build_SRCDEPS := dt_grammar.h

$(call obj-name,libdtrace-build,dt_open.o): $(objdir)/dt_git_version.h

SHLIBS += libdtrace

libdtrace_DIR := $(current-dir)
libdtrace_TARGET = libdtrace
libdtrace_LIBS := -ldtrace-ctf -lelf -lz -lrt -lpthread -ldl -lm
libdtrace_VERSION := 0.0.0
libdtrace_SONAME := libdtrace.so.0
libdtrace_VERSCRIPT := $(libdtrace_DIR)libdtrace.ver
libdtrace_LIBSOURCES := libdtrace-build libproc libport
libdtrace_SECONDARY := libproc libport

SHORTKERNELS := $(foreach kernel,$(KERNELS),$(shell printf %s $(kernel) | awk -F. '{ print $$1 "." $$2; }'))

-include libdtrace/$(ARCHINC)/Build

$(libdtrace_DIR)dt_errtags.c: $(libdtrace-build_DIR)dt_errtags.h $(libdtrace-build_DIR)/mkerrtags.sh
	sh $(libdtrace-build_DIR)mkerrtags.sh < $(libdtrace-build_DIR)dt_errtags.h | sed -e 's/\\n/\n/g' > $(libdtrace-build_DIR)dt_errtags.c

$(libdtrace-build_DIR)dt_names.c: $(HDRPREFIX)/linux/dtrace/dif_defines.h $(libdtrace-build_DIR)/mknames.sh
	$(call describe-target,MKNAMES,$(libdtrace-build_DIR)dt_names.c)
	sh $(libdtrace-build_DIR)mknames.sh < $(HDRPREFIX)/linux/dtrace/dif_defines.h | sed -e 's/\\n/\n/g' > $(libdtrace-build_DIR)dt_names.c

$(libdtrace-build_DIR)%.h $(libdtrace-build_DIR)%.c: $(libdtrace-build_DIR)%.y
	$(call describe-target,YACC,$(libdtrace-build_DIR)$*.c)
	bison -o $(libdtrace-build_DIR)$*.c -d $(libdtrace-build_DIR)$*.y

$(libdtrace-build_DIR)dt_lex.c: $(libdtrace-build_DIR)dt_grammar.h $(libdtrace-build_DIR)dt_lex.l
	$(call describe-target,LEX,$(libdtrace-build_DIR)dt_lex.c)
	flex -o$(libdtrace-build_DIR)dt_lex.c $(libdtrace-build_DIR)dt_lex.l

M4_DLIBS += \
	procfs.d \
	io.d \
	sysevent.d

BUILD_DLIBS += \
	$(M4_DLIBS) \
	errno.d \
	regs.d \
	signal.d

WORKING_DLIBS = errno.d \
                io.d \
                ip.d \
                lockstat.d \
                net.d \
                procfs.d \
                regs.d \
                sched.d \
                signal.d \
                tcp.d \
                udp.d \
                unistd.d

# M4-driven substitutions.

override m4-dlib-targets = $(foreach kernel,$(SHORTKERNELS), \
	$(addprefix $(objdir)/dlibs/$(kernel)/, \
	$(filter $(WORKING_DLIBS),$(M4_DLIBS))))
override other-dlib-targets = $(foreach kernel,$(SHORTKERNELS), \
	$(addprefix $(objdir)/dlibs/$(kernel)/, \
	$(filter-out $(M4_DLIBS),$(WORKING_DLIBS))))

$(objdir)/dlibs/.dir.stamp:
	mkdir -p $(objdir)/dlibs $(foreach kernel,$(SHORTKERNELS),$(objdir)/dlibs/$(kernel))
	@touch $(objdir)/dlibs/.dir.stamp
	ln -sf ../../$(libdtrace-build_DIR)/drti-vers $(objdir)/dlibs

define dlib-kernel-ver-template
$(objdir)/dlibs/$(shell printf %s $(1) | awk -F. '{ print $$1 "." $$2; }')/%.d: override SHORTKERNELVER := $(shell printf %s $(1) | awk -F. '{ print $$1 "." $$2; }')
$(objdir)/dlibs/$(shell printf %s $(1) | awk -F. '{ print $$1 "." $$2; }')/%.d: override KERNELVER := $(1)
endef

$(foreach kernel,$(KERNELS),$(eval $(call dlib-kernel-ver-template,$(kernel))))

# The include order here is derived from the LINUXINCLUDE definition in
# the top-level kernel Makefile (which incorporates the USERINCLUDE
# definition in turn.)
$(m4-dlib-targets): $(objdir)/dlibs/%.d: $$(foreach name,$$(notdir %.d.in), \
			$$(call src-name,libdtrace,$$(name))) \
			$(objdir)/dlibs/.dir.stamp
	$(call describe-target,M4,$<)
	$(PREPROCESS) -P -x c -Ilibdtrace/$(ARCHINC) \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/arch/$(KERNELARCH)/include \
		      $(if $(KERNELODIR),-I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/arch/$(KERNELARCH)/include/generated/uapi) \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/arch/$(KERNELARCH)/include/generated/uapi \
		      $(if $(KERNELODIR),-I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/arch/$(KERNELARCH)include/generated) \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/arch/$(KERNELARCH)/include/generated \
		      $(if $(KERNELODIR),-I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/include) \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/include \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/arch/$(KERNELARCH)/include/uapi \
		      $(if $(KERNELODIR),-I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/include/generated/uapi) \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/$(KERNELODIR)/include/generated/uapi \
		      -I$(KERNELDIRPREFIX)/$(KERNELVER)$(KERNELDIRSUFFIX)/include/uapi \
		      -D_KERNEL -D__KERNEL__ $(basename $(basename $<)).m4 2>$@.h.err | grep -v '^# [0-9]' | tee $@.h | \
	m4 --prefix-builtins -DSUBST_KERNEL=$(SHORTKERNELVER) -DSUBST_ARCH=$(KERNELARCH) $(libdtrace-build_DIR)def-start.m4 \
		$(libdtrace-build_DIR)def-replace.m4 - $(libdtrace-build_DIR)/d-subst.m4 \
                $(libdtrace-build_DIR)m4-utils.m4 $(libdtrace-build_DIR)/d-kern.m4 \
		$(libdtrace-build_DIR)def-end.m4 $< > $@; \
        if [[ $$? -ne 0 ]]; then \
		cat $@.h.err >&2; \
		echo "Error: Not all tokens in $< defined in headers." >&2; \
		rm -f $@.h $@.h.err; \
		exit 1; \
	fi
	if ! grep -q __def_replace $@.h; then \
		cat @$.h 2>/dev/null; \
                cat $@.h.err >&2; \
		echo "Error: Preprocessing of header included in $< failed." >&2; \
		rm -f $@.h $@.h.err; \
		exit 1; \
	fi
	rm -f $@.h $@.h.err;

$(other-dlib-targets): $(objdir)/dlibs/%.d: $$(foreach name,$$(notdir %.d), \
			$$(call src-name,libdtrace,$$(name))) \
			$(objdir)/dlibs/.dir.stamp
	$(call describe-target,CP,$<)
	cp -f $< $@

PHONIES += dlibs
TARGETS += dlibs
dlibs: $(m4-dlib-targets) $(other-dlib-targets)

PHONIES += objs
TARGETS += objs
BUILD_DRTI_OBJ = $(objdir)/drti.o
DRTI_OBJ = $(objdir)/dlibs/drti.o
BUILD_DRTI32_OBJ = $(objdir)/drti32.o
DRTI32_OBJ = $(objdir)/dlibs/drti32.o

objs: $(DRTI_OBJ) $(DRTI32_OBJ)
$(BUILD_DRTI_OBJ): $(libdtrace-build_DIR)drti.c
	$(call describe-target,CC,$<)
	$(CC) $(filter-out --coverage,$(CFLAGS)) -fPIC $(CPPFLAGS) $(libdtrace-build_CPPFLAGS) -MP -MMD -c -o $@ $<
$(DRTI_OBJ): $(BUILD_DRTI_OBJ) $(objdir)/dlibs/.dir.stamp
	ln -sf $(BUILD_DRTI_OBJ) $(DRTI_OBJ)
$(BUILD_DRTI32_OBJ): $(libdtrace-build_DIR)drti.c
	$(call describe-target,CC-32,$<)
	$(CC) $(filter-out --coverage,$(CFLAGS)) -m32 -fPIC $(CPPFLAGS) $(libdtrace-build_CPPFLAGS) -MP -MMD -c -o $@ $<
$(DRTI32_OBJ): $(BUILD_DRTI32_OBJ) $(objdir)/dlibs/.dir.stamp
	ln -sf $(BUILD_DRTI32_OBJ) $(DRTI32_OBJ)

# Custom substitutions.

$(libdtrace-build_DIR)errno.d: /usr/include/linux/errno.h
	$(call describe-target,AWK,$(libdtrace-build_DIR)errno.d)
	echo '#include <errno.h>' | $(CC) -x c -E -dD - \
	| grep '^#define E' | $(libdtrace-build_DIR)mkerrno.sh > $@

$(libdtrace-build_DIR)signal.d: /usr/include/bits/signum.h
	$(call describe-target,SED,$(libdtrace-build_DIR)signal.d)
	$(libdtrace-build_DIR)mksignal.sh < /usr/include/bits/signum.h \
	| sed -e 's/\\n/\n/g' \
	| sed -e '/inline int SIGCLD/{h;d}' -e '/"1.0" SIGCHLD/{G;}' \
	| sed -e '/"1.0" SIGCLD/{h;d}' -e '/ = SIGCHLD;/{G;}' \
	| sed -e '/inline int SIGPOLL/{h;d}' -e '/"1.0" SIGIO/{G;}' \
	| sed -e '/"1.0" SIGPOLL/{h;d}' -e '/ = SIGIO/{G;}' \
	| sed -e '/SIGRTMIN/d' -e '/SIGRTMAX/d' > $@

$(libdtrace-build_DIR)regs.d: $(libdtrace-build_DIR)$(ARCHINC)/regs.d
	cp $< $@

clean::
	$(call describe-target,CLEAN,libdtrace)
	rm -f $(libdtrace-build_DIR)dt_errtags.c $(libdtrace-build_DIR)dt_names.c
	rm -f $(libdtrace-build_DIR)dt_grammar.h $(libdtrace-build_DIR)dt_grammar.c
	rm -f $(libdtrace-build_DIR)dt_lex.c
	rm -f $(libdtrace-build_DIR)regs.d
	rm -f $(addprefix $(libdtrace-build_DIR),$(BUILD_DLIBS))

install::
	mkdir -p $(INSTLIBDIR)/dtrace $(INSTINCLUDEDIR)
	$(call describe-install-target,$(INSTINCLUDEDIR),dtrace.h)
	install -m 644 $(libdtrace-build_DIR)dtrace.h $(INSTINCLUDEDIR)
	$(call describe-install-target,$(INSTLIBDIR),$(libdtrace_TARGET).so.$(libdtrace_VERSION))
	install -m 755 $(objdir)/$(libdtrace_TARGET).so.$(libdtrace_VERSION) $(INSTLIBDIR)
	$(call describe-install-target,$(INSTLIBDIR),$(libdtrace_SONAME))
	ln -sf libdtrace.so.$(libdtrace_VERSION) $(INSTLIBDIR)/$(libdtrace_SONAME)
	$(call describe-install-target,$(INSTLIBDIR),$(libdtrace_TARGET).so)
	ln -sf libdtrace.so.$(libdtrace_VERSION) $(INSTLIBDIR)/$(libdtrace_TARGET).so
	$(call describe-install-target,$(INSTLIBDIR)/dtrace,$(DRTI_OBJ))
	install -m 644 $(DRTI_OBJ) $(INSTLIBDIR)/dtrace
	$(call describe-install-target,$(INSTLIBDIR)/dtrace,$(DRTI32_OBJ))
	install -m 644 $(DRTI32_OBJ) $(INSTLIBDIR)/dtrace
	$(call describe-install-target,$(INSTLIBDIR)/dtrace,drti-vers)
	install -m 644 $(objdir)/dlibs/drti-vers $(INSTLIBDIR)/dtrace
	for kernel in $(SHORTKERNELS); do \
		$(call describe-expanded-install-target,$(INSTLIBDIR)/dtrace/$$kernel,$(WORKING_DLIBS)) \
		mkdir -p $(INSTLIBDIR)/dtrace/$$kernel && \
		cd $(objdir)/dlibs/$$kernel && install -m 644 $(WORKING_DLIBS) $(INSTLIBDIR)/dtrace/$$kernel; \
	done
